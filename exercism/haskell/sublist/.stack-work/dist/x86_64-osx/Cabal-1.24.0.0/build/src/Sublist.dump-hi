
==================== FINAL INTERFACE ====================
2016-09-05 15:03:20.048714 UTC

interface sublist-0.0.0-LzccPXKc2D2oqD0LpMUVh:Sublist 8001
  interface hash: 6adea06f29505531b27789c7fb6eadca
  ABI hash: 0c5a9fd2de82dde044045664e7ece91b
  export-list hash: 95f5ff573cc02d3d35876649905b2a7b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a4046e0fdab24403354cf30558c1ea1c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Sublist.sublist
  Sublist.Sublist{Sublist.Equal Sublist.Sublist Sublist.Superlist Sublist.Unequal}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
2730392e5ed87dee7479e36dd90bf55c
  $fEqSublist :: GHC.Classes.Eq Sublist.Sublist
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Sublist.Sublist
                  Sublist.$fEqSublist_$c==
                  Sublist.$fEqSublist_$c/= -}
2730392e5ed87dee7479e36dd90bf55c
  $fEqSublist_$c/= ::
    Sublist.Sublist -> Sublist.Sublist -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Sublist.Sublist) (b :: Sublist.Sublist) ->
                 case a of wild {
                   Sublist.Equal
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Sublist.Equal -> GHC.Types.False }
                   Sublist.Unequal
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Sublist.Unequal -> GHC.Types.False }
                   Sublist.Sublist
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Sublist.Sublist -> GHC.Types.False }
                   Sublist.Superlist
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Sublist.Superlist -> GHC.Types.False } }) -}
2730392e5ed87dee7479e36dd90bf55c
  $fEqSublist_$c== ::
    Sublist.Sublist -> Sublist.Sublist -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Sublist.Sublist) (ds1 :: Sublist.Sublist) ->
                 case ds of wild {
                   Sublist.Equal
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Sublist.Equal -> GHC.Types.True }
                   Sublist.Unequal
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Sublist.Unequal -> GHC.Types.True }
                   Sublist.Sublist
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Sublist.Sublist -> GHC.Types.True }
                   Sublist.Superlist
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Sublist.Superlist -> GHC.Types.True } }) -}
2730392e5ed87dee7479e36dd90bf55c
  $fShowSublist :: GHC.Show.Show Sublist.Sublist
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Sublist.Sublist
                  Sublist.$fShowSublist_$cshowsPrec
                  Sublist.$fShowSublist_$cshow
                  Sublist.$fShowSublist_$cshowList -}
ab2f53e4473926a0cec4461f34d1034c
  $fShowSublist1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Superlist"#) -}
5d179785ca382a3517cc2ebcc7bca131
  $fShowSublist2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Sublist"#) -}
840d8345f616fbf9f0ce0c02e38f426f
  $fShowSublist3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Unequal"#) -}
a377e5e5d43c01869bd8aa5d60e399f7
  $fShowSublist4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Equal"#) -}
2730392e5ed87dee7479e36dd90bf55c
  $fShowSublist_$cshow :: Sublist.Sublist -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Sublist.Sublist) ->
                 Sublist.$fShowSublist_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2730392e5ed87dee7479e36dd90bf55c
  $fShowSublist_$cshowList :: [Sublist.Sublist] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Sublist.Sublist
                   Sublist.$w$cshowsPrec) -}
2730392e5ed87dee7479e36dd90bf55c
  $fShowSublist_$cshowsPrec ::
    GHC.Types.Int -> Sublist.Sublist -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Sublist.Sublist)
                   (w2 :: GHC.Base.String) ->
                 Sublist.$w$cshowsPrec w1 w2) -}
71eacb33a3d47f3de5c223950f314c75
  $tc'Equal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11127062618717853832##
                   10399074218531589489##
                   Sublist.$trModule
                   Sublist.$tc'Equal1) -}
3feb8fbd2f697f794a657086f1b4d131
  $tc'Equal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Equal"#) -}
b974e72b8b539a609f7caa835e9a037a
  $tc'Sublist :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13600442723587667651##
                   5774879369788877733##
                   Sublist.$trModule
                   Sublist.$tc'Sublist1) -}
74640bca976954e0f0fb58598d0d3a2f
  $tc'Sublist1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sublist"#) -}
faec105b25d94c634192b7d774fba0be
  $tc'Superlist :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1551807590511778115##
                   1144074592537192130##
                   Sublist.$trModule
                   Sublist.$tc'Superlist1) -}
8c103174ab8c47507f119fed8cca46fd
  $tc'Superlist1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Superlist"#) -}
36fe9c19bbd19a89c6a3abe0547efb41
  $tc'Unequal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17561486759097167616##
                   18497545243598136##
                   Sublist.$trModule
                   Sublist.$tc'Unequal1) -}
4ba76169ff8621219e4c8eb674b6e56e
  $tc'Unequal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Unequal"#) -}
bd3eef294d42eeb7890980aa309e940c
  $tcSublist :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3613230847968866408##
                   6494823548331226368##
                   Sublist.$trModule
                   Sublist.$trModule1) -}
2fc49cea9500cee62fe8df10ca21ac8b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Sublist.$trModule2
                   Sublist.$trModule1) -}
2b901d52b606a5d142e655154d9ec5bd
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Sublist"#) -}
c89c7772b6cbe26cb20bded1bfa7ebf4
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "sublist-0.0.0-LzccPXKc2D2oqD0LpMUVh"#) -}
2730392e5ed87dee7479e36dd90bf55c
  $w$cshowsPrec ::
    Sublist.Sublist -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Sublist.Sublist) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Sublist.Equal
                   -> GHC.Base.++ @ GHC.Types.Char Sublist.$fShowSublist4 w1
                   Sublist.Unequal
                   -> GHC.Base.++ @ GHC.Types.Char Sublist.$fShowSublist3 w1
                   Sublist.Sublist
                   -> GHC.Base.++ @ GHC.Types.Char Sublist.$fShowSublist2 w1
                   Sublist.Superlist
                   -> GHC.Base.++ @ GHC.Types.Char Sublist.$fShowSublist1 w1 }) -}
2730392e5ed87dee7479e36dd90bf55c
  data Sublist = Equal | Unequal | Sublist | Superlist
1cb4f40f0cd91133c59b13036a115a74
  sublist :: GHC.Classes.Eq a => [a] -> [a] -> Sublist.Sublist
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U><S,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (as :: [a])
                   (bs :: [a]) ->
                 case GHC.Classes.$fEq[]_$c== @ a $dEq as bs of wild {
                   GHC.Types.False
                   -> case Data.OldList.isInfixOf @ a $dEq as bs of wild1 {
                        GHC.Types.False
                        -> case Data.OldList.isInfixOf @ a $dEq bs as of wild2 {
                             GHC.Types.False -> Sublist.Unequal
                             GHC.Types.True -> Sublist.Superlist }
                        GHC.Types.True -> Sublist.Sublist }
                   GHC.Types.True -> Sublist.Equal }) -}
instance [safe] GHC.Classes.Eq [Sublist.Sublist]
  = Sublist.$fEqSublist
instance [safe] GHC.Show.Show [Sublist.Sublist]
  = Sublist.$fShowSublist
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

