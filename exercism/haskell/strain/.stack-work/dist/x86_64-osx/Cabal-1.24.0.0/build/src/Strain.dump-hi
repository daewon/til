
==================== FINAL INTERFACE ====================
2016-09-10 10:03:23.303592 UTC

interface strain-0.0.0-F2DHcWZecUvKFGzwHrhEE7:Strain 8001
  interface hash: aaf8c6ede3550689da862b1f261e4c92
  ABI hash: f9ea0401b81db0ccd5850f426b881fbc
  export-list hash: ec8f8b4feb67a6efe0895c4b26cdc9fc
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a4046e0fdab24403354cf30558c1ea1c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Strain.discard
  Strain.keep
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
833f2be9e8211ab11e0b5c6608bcec53
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Strain.$trModule2
                   Strain.$trModule1) -}
cf1635b046b628b41e21f7641a181e24
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Strain"#) -}
e6cec62227eaec0eceee18fdd155ebee
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "strain-0.0.0-F2DHcWZecUvKFGzwHrhEE7"#) -}
13496527220299dabe366ff0b58a6929
  discard :: (a -> GHC.Types.Bool) -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (f :: a -> GHC.Types.Bool) (a1 :: [a]) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ a
                      @ b
                      (GHC.List.filterFB
                         @ a
                         @ b
                         c
                         (\ (x :: a) ->
                          case f x of wild {
                            GHC.Types.False -> GHC.Types.True
                            GHC.Types.True -> GHC.Types.False }))
                      n
                      a1)) -}
498cb9076230ba032beae530dfebe2ff
  keep :: (a -> GHC.Types.Bool) -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True) GHC.List.filter -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

