
==================== FINAL INTERFACE ====================
2016-09-08 14:22:32.138524 UTC

interface sum-of-multiples-0.0.0-EuoT2hUAWAUULQUVU0l2y:SumOfMultiples 8001
  interface hash: dc1c8cb6c4cae9c489534d44e7107aed
  ABI hash: f272a6422ace1d26d59369f5ca90d692
  export-list hash: 630fb62709284e5ad26cbbc46ce20c02
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a4046e0fdab24403354cf30558c1ea1c
  sig of: Nothing
  used TH splices: False
  where
exports:
  SumOfMultiples.sumOfMultiples
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
cbf4e8626e97cb421af5081860d1d392
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SumOfMultiples.$trModule2
                   SumOfMultiples.$trModule1) -}
28b8ced845421726a66e0565e730906e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SumOfMultiples"#) -}
0103ec14a80dd2304a3bd455866c6384
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "sum-of-multiples-0.0.0-EuoT2hUAWAUULQUVU0l2y"#) -}
bfe0fc1738121bbedea7a511764e2e4d
  sumOfMultiples :: GHC.Real.Integral a => [a] -> a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A)><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dIntegral :: GHC.Real.Integral a)
                   (eta :: [a])
                   (eta1 :: a) ->
                 let {
                   $dReal :: GHC.Real.Real a = GHC.Real.$p1Integral @ a $dIntegral
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                 } in
                 let {
                   k :: a -> a -> a = GHC.Num.+ @ a $dNum
                 } in
                 letrec {
                   go :: [a] -> a -> a {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ (ds :: [a]) (eta2 :: a) ->
                     case ds of wild { [] -> eta2 : y ys -> go ys (k eta2 y) }
                 } in
                 let {
                   $dOrd :: GHC.Classes.Ord a = GHC.Real.$p2Real @ a $dReal
                 } in
                 letrec {
                   go1 :: [a] -> [a] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ a
                       : y ys
                       -> let {
                            n :: [a] = go1 ys
                          } in
                          letrec {
                            go2 :: a -> [a] {- Arity: 1, Strictness: <L,U> -}
                            = \ (x :: a) ->
                              case GHC.Classes.< @ a $dOrd x eta1 of wild1 {
                                GHC.Types.False -> n
                                GHC.Types.True
                                -> GHC.Types.: @ a x (go2 (GHC.Num.+ @ a $dNum x y)) }
                          } in
                          go2 y }
                 } in
                 go
                   (Data.OldList.nubBy
                      @ a
                      (GHC.Classes.== @ a (GHC.Classes.$p1Ord @ a $dOrd))
                      (go1 eta))
                   (GHC.Num.fromInteger @ a $dNum SumOfMultiples.sumOfMultiples1)) -}
d08038b29eb07ff2dbb59e9b29a24fb7
  sumOfMultiples1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

